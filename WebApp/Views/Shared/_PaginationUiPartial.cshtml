@using RescueTube.Core.Utils.Pagination
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Htmx
@using WebApp.Utils
@using WebApp.ViewModels
@model WebApp.ViewModels.PaginationUiPartialViewModel

@{
    @if (!PaginationUtils.IsOnlyPage(Model.Total, Model.Limit) && !(Model.Page == 0 && Model.AmountOnPage < Model.Limit))
    {
        <div>
            <div class="d-flex gap-1">
                @{
                    var isHtmx = Context.Request.IsHtmx(out var htmxHeaders);
                }
                <!form
                    method="get"
                    @(isHtmx
                        ? $"hx-get={CurrentUri} " +
                          $"hx-target=#{htmxHeaders?.Target}"
                        : string.Empty)>
                    <partial name="_PaginationButtonPartial" model="@(new PaginationButtonPartialViewModel(0, Model.Limit, "<<", Disabled: Model.Page == 0))"/>
                    <partial name="_PaginationButtonPartial" model="@(new PaginationButtonPartialViewModel(PreviousPage, Model.Limit, "<", Disabled: Model.Page == 0))"/>

                    @foreach (var (key, value) in GetDictionary())
                    {
                        <input type="hidden" name="@key" value="@value"/>
                    }
                    <input asp-for="Page" style="max-width: 6ch"/>

                    <partial name="_PaginationButtonPartial" model="@(new PaginationButtonPartialViewModel(NextPage, Model.Limit, ">", Disabled: !HasNextPage))"/>
                    <partial name="_PaginationButtonPartial" model="@(new PaginationButtonPartialViewModel(LastPage, Model.Limit, ">>", Disabled: Model.Total == null))"/>

                    <label>
                        Items per page:
                        <input asp-for="Limit" style="max-width: 6ch"/>
                    </label>
                    <input type="submit" value="Apply"/>
                </!form>
            </div>
        </div>
        @if (Model.AmountOnPage == 0)
        {
            <div>@string.Format(Resources.WebApp.Views.Shared._PaginationUiPartial.ResultsAmountOnPage, 0)</div>
        }
        else if (Model.Total != null)
        {
            <div>@string.Format(Resources.WebApp.Views.Shared._PaginationUiPartial.RangeResultsKnownTotal, PageRangeStart, PageRangeEnd, Model.Total)</div>
        }
        else if (Model.AmountOnPage < Model.Limit)
        {
            <div>@string.Format(Resources.WebApp.Views.Shared._PaginationUiPartial.RangeResultsKnownTotal, PageRangeStart, PageRangeEnd, PageRangeEnd)</div>
        }
        else
        {
            <div>
                @string.Format(Resources.WebApp.Views.Shared._PaginationUiPartial.RangeResultsUnknownTotal,
                    PageRangeStart, PageRangeEnd)
            </div>
        }
    }
    else
    {
        <div>@string.Format(Resources.WebApp.Views.Shared._PaginationUiPartial.ResultsAmount, Model.AmountOnPage)</div>
    }
}

@functions
{
    private int PreviousPage => Math.Max(0, Model.Page - 1);
    private int NextPage => Math.Min(LastPage, Model.Page + 1);
    private int LastPage => PaginationUtils.GetLastPage(Model.Total, Model.Limit);

    private int PageRangeStart => Model.Limit * Model.Page + 1;
    private int PageRangeEnd => Model.Limit * Model.Page + Model.AmountOnPage;

    private bool HasNextPage => Model.AmountOnPage > 0 && LastPage > Model.Page;

    private string CurrentUri => $"{Context.Request.Scheme}://{Context.Request.Host}{Context.Request.Path}";

    private IDictionary<string, string> GetDictionary() => GetDictionary(Context.GetRouteValues());

    private IDictionary<string, string> GetDictionary(object? routeValues)
    {
        var result = new Dictionary<string, string>();
        if (routeValues != null)
        {
            var routeValueDictionary = new RouteValueDictionary(routeValues);
            routeValueDictionary.Remove(nameof(Model.Page));
            routeValueDictionary.Remove(nameof(Model.Limit));
            result = routeValueDictionary.ToDictionary(kvp => kvp.Key,
                kvp => kvp.Value?.ToString() ?? "");
        }

        return result;
    }
}