@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Utils.Pagination
@using Htmx
@using Microsoft.AspNetCore.WebUtilities
@using WebApp.Utils
@model WebApp.ViewModels.PaginationUiPartialViewModel

@{
    int? totalPages = Model.Total == null ? null : Convert.ToInt32(Math.Ceiling(Model.Total.Value / (double)Model.Limit));
    var pagesSelection = GetPagesSelection(totalPages);

    @if (!PaginationUtils.IsOnlyPage(Model.Total, Model.Limit) && !(Model.Page == 0 && Model.AmountOnPage < Model.Limit))
    {
        <div>
            <div class="d-flex gap-1">
                @{
                    int? previousPage = null;
                    @foreach (var selectPage in pagesSelection)
                    {
                        @if (previousPage + 1 < selectPage)
                        {
                            <span class="rounded-3 p-2">...</span>
                        }
                        previousPage = selectPage;
                        @if (Context.Request.IsHtmx(out var htmxHeaders))
                        {
                            <a class="btn @(selectPage == Model.Page ? "btn-primary" : "btn-outline-primary")"
                               hx-target="#@htmxHeaders!.Target"
                               hx-get="@GetQueryString(selectPage)">
                                @(selectPage + 1)
                            </a>
                        }
                        else
                        {
                            <a class="btn @(selectPage == Model.Page ? "btn-primary" : "btn-outline-primary")"
                               asp-all-route-data="@GetDictionary(selectPage)">
                                @(selectPage + 1)
                            </a>
                        }
                    }
                    @if (Model.Total == null && Model.AmountOnPage >= Model.Limit)
                    {
                        var nextPage = Model.Page + 1;
                        if (Context.Request.IsHtmx(out var htmxHeaders))
                        {
                            <a class="btn btn-outline-primary" hx-get="@GetQueryString(nextPage)"
                               hx-target="#@htmxHeaders!.Target">
                                @Resources.WebApp.Views.Shared._PaginationUiPartial.NextPage
                            </a>
                        }
                        else
                        {
                            <a class="btn btn-outline-primary" asp-all-route-data="@GetDictionary(nextPage)">
                                @Resources.WebApp.Views.Shared._PaginationUiPartial.NextPage
                            </a>
                        }
                    }
                }
            </div>
        </div>
        @if (Model.AmountOnPage == 0)
        {
            <div>@string.Format(Resources.WebApp.Views.Shared._PaginationUiPartial.ResultsAmountOnPage, 0)</div>
        }
        else if (Model.Total != null)
        {
            <div>@string.Format(Resources.WebApp.Views.Shared._PaginationUiPartial.RangeResultsKnownTotal, PageRangeStart, PageRangeEnd, Model.Total)</div>
        }
        else if (Model.AmountOnPage < Model.Limit)
        {
            <div>@string.Format(Resources.WebApp.Views.Shared._PaginationUiPartial.RangeResultsKnownTotal, PageRangeStart, PageRangeEnd, PageRangeEnd)</div>
        }
        else
        {
            <div>
                @string.Format(Resources.WebApp.Views.Shared._PaginationUiPartial.RangeResultsUnknownTotal,
                    PageRangeStart, PageRangeEnd)
            </div>
        }
    }
    else
    {
        <div>@string.Format(Resources.WebApp.Views.Shared._PaginationUiPartial.ResultsAmount, Model.AmountOnPage)</div>
    }
}

@functions
{
    private int PageRangeStart => Model.Limit * Model.Page + 1;
    private int PageRangeEnd => Model.Limit * Model.Page + Model.AmountOnPage;
    
    private IEnumerable<int> GetPagesSelection(int? totalPages)
    {
        const int selectionAmountToShow = 5;
        var pagesSelection = new List<int>();
        var maxAddedPage = 0;
        if (Model.Page - Math.Ceiling(selectionAmountToShow / 2d) > 0)
        {
            pagesSelection.Add(0);
        }
        var selectedAmount = 0;
        var offset = 0;
        while (selectedAmount < selectionAmountToShow)
        {
            var page = Convert.ToInt32(Model.Page - Math.Ceiling(selectionAmountToShow / 2d) + offset);
            if (page < 0)
            {
                offset++;
                continue;
            }
            if (page >= totalPages) break;
            if (totalPages == null && page > Model.Page) break;
            if (pagesSelection.Contains(page))
            {
                offset++;
                continue;
            }
            maxAddedPage = page;
            pagesSelection.Add(page);
            offset++;
            selectedAmount++;
        }
        if (totalPages != null && maxAddedPage < totalPages - 1)
        {
            pagesSelection.Add(totalPages.Value);
        }
        return pagesSelection;
    }

    private string GetQueryString(int page)
    {
        var dictionary = GetDictionary(page);
        return QueryHelpers.AddQueryString(
            $"{Context.Request.Scheme}://{Context.Request.Host}{Context.Request.Path}",
            dictionary!);
    }

    private IDictionary<string, string> GetDictionary(int page)
    {
        return GetDictionary(Context.GetRouteValues(), page);
    }

    private IDictionary<string, string> GetDictionary(object? routeValues, int page)
    {
        var result = new Dictionary<string, string>();
        if (routeValues != null)
        {
            var routeValueDictionary = new RouteValueDictionary(routeValues);
            routeValueDictionary.Remove(nameof(Model.Page));
            routeValueDictionary.Remove(nameof(Model.Limit));
            result = routeValueDictionary.ToDictionary(kvp => kvp.Key,
                kvp => kvp.Value?.ToString() ?? "");
        }
        result[nameof(Model.Page)] = $"{page}";
        result[nameof(Model.Limit)] = $"{Model.Limit}";
        return result;
    }
}