@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Utils.Pagination
@using Htmx
@using Microsoft.AspNetCore.WebUtilities
@using WebApp.Utils
@using WebApp.ViewModels
@model WebApp.ViewModels.PaginationUiPartialViewModel

@{
    int? totalPages = Model.Total == null ? null : Convert.ToInt32(Math.Ceiling(Model.Total.Value / (double)Model.Limit));

    @if (!PaginationUtils.IsOnlyPage(Model.Total, Model.Limit) && !(Model.Page == 0 && Model.AmountOnPage < Model.Limit))
    {
        <div>
            <div class="d-flex gap-1">
                <partial name="_PaginationButtonPartial" model="@(new PaginationButtonPartialViewModel(0, Model.Limit, "<<"))"/>
                <partial name="_PaginationButtonPartial" model="@(new PaginationButtonPartialViewModel(PreviousPage, Model.Limit, "<"))"/>
                @if (Context.Request.IsHtmx(out var htmxHeaders))
                {
                    <form method="get" hx-get="@GetQueryString(Model.Page)"
                          hx-target="#@htmxHeaders!.Target">
                        @foreach (var (key, value) in GetDictionary())
                        {
                            <input type="hidden" name="@key" value="@value"/>
                        }
                        <input asp-for="Page"/>
                        <input asp-for="Limit"/>
                    </form>
                }
                else
                {
                    <form method="get">
                        @foreach (var (key, value) in GetDictionary())
                        {
                            <input type="hidden" name="@key" value="@value"/>
                        }
                        <input asp-for="Page"/>
                        <input asp-for="Limit"/>
                    </form>
                }
                <partial name="_PaginationButtonPartial" model="@(new PaginationButtonPartialViewModel(NextPage, Model.Limit, ">"))"/>
                <partial name="_PaginationButtonPartial" model="@(new PaginationButtonPartialViewModel(LastPage, Model.Limit, ">>"))"/>
            </div>
        </div>
        @if (Model.AmountOnPage == 0)
        {
            <div>@string.Format(Resources.WebApp.Views.Shared._PaginationUiPartial.ResultsAmountOnPage, 0)</div>
        }
        else if (Model.Total != null)
        {
            <div>@string.Format(Resources.WebApp.Views.Shared._PaginationUiPartial.RangeResultsKnownTotal, PageRangeStart, PageRangeEnd, Model.Total)</div>
        }
        else if (Model.AmountOnPage < Model.Limit)
        {
            <div>@string.Format(Resources.WebApp.Views.Shared._PaginationUiPartial.RangeResultsKnownTotal, PageRangeStart, PageRangeEnd, PageRangeEnd)</div>
        }
        else
        {
            <div>
                @string.Format(Resources.WebApp.Views.Shared._PaginationUiPartial.RangeResultsUnknownTotal,
                    PageRangeStart, PageRangeEnd)
            </div>
        }
    }
    else
    {
        <div>@string.Format(Resources.WebApp.Views.Shared._PaginationUiPartial.ResultsAmount, Model.AmountOnPage)</div>
    }
}

@functions
{
    private int PreviousPage => Math.Max(0, Model.Page - 1);
    private int NextPage => Math.Min(LastPage, Model.Page + 1);
    private int LastPage => PaginationUtils.GetLastPage(Model.Total, Model.Limit);

    private int PageRangeStart => Model.Limit * Model.Page + 1;
    private int PageRangeEnd => Model.Limit * Model.Page + Model.AmountOnPage;

    private string GetQueryString(int page)
    {
        var dictionary = GetDictionary(page);
        return QueryHelpers.AddQueryString(
            $"{Context.Request.Scheme}://{Context.Request.Host}{Context.Request.Path}",
            dictionary!);
    }

    private IDictionary<string, string> GetDictionary() => GetDictionary(Context.GetRouteValues());
    
    private IDictionary<string, string> GetDictionary(object? routeValues)
    {
        var result = new Dictionary<string, string>();
        if (routeValues != null)
        {
            var routeValueDictionary = new RouteValueDictionary(routeValues);
            routeValueDictionary.Remove(nameof(Model.Page));
            routeValueDictionary.Remove(nameof(Model.Limit));
            result = routeValueDictionary.ToDictionary(kvp => kvp.Key,
                kvp => kvp.Value?.ToString() ?? "");
        }

        return result;
    }
    
    private IDictionary<string, string> GetDictionary(int page)
    {
        return GetDictionary(Context.GetRouteValues(), page);
    }

    private IDictionary<string, string> GetDictionary(object? routeValues, int page)
    {
        var result = GetDictionary(routeValues);

        result[nameof(Model.Page)] = $"{page}";
        result[nameof(Model.Limit)] = $"{Model.Limit}";
        return result;
    }
}