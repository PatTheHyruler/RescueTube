@using Htmx
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Microsoft.AspNetCore.WebUtilities
@using WebApp.Utils
@model WebApp.ViewModels.PaginationButtonPartialViewModel

@if (Model.Disabled)
{
    <div class="btn btn-dark disabled">
        @Model.Text
    </div>
}
else if (Context.Request.IsHtmx(out var htmxHeaders))
{
<a class="btn btn-outline-primary" hx-get="@GetQueryString(Model.Page)"
   hx-target="#@htmxHeaders!.Target">
    @Model.Text
</a>
}
else
{
<a class="btn btn-outline-primary" asp-all-route-data="@GetDictionary(Model.Page)">
    @Model.Text
</a>
}

@functions
{
    private string GetQueryString(int page)
    {
        var dictionary = GetDictionary(page);
        return QueryHelpers.AddQueryString(
            $"{Context.Request.Scheme}://{Context.Request.Host}{Context.Request.Path}",
            dictionary!);
    }

    private IDictionary<string, string> GetDictionary(int page)
    {
        return GetDictionary(Context.GetRouteValues(), page);
    }

    private IDictionary<string, string> GetDictionary(object? routeValues, int page)
    {
        var result = new Dictionary<string, string>();
        if (routeValues != null)
        {
            var routeValueDictionary = new RouteValueDictionary(routeValues);
            routeValueDictionary.Remove(nameof(Model.Page));
            routeValueDictionary.Remove(nameof(Model.Limit));
            result = routeValueDictionary.ToDictionary(kvp => kvp.Key,
                kvp => kvp.Value?.ToString() ?? "");
        }
        result[nameof(Model.Page)] = $"{page}";
        result[nameof(Model.Limit)] = $"{Model.Limit}";
        return result;
    }
}
